<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
AppDomain.CurrentDomain.ReflectionOnlyAssemblyResolve += AllReflectionOnlyAssemblyResolve;

var methods = config
  .Assemblies
  .SelectMany(a => 
  {
    var asm = Assembly.ReflectionOnlyLoadFrom(a.Path);
    return a.TypeNames.Select(asm.GetType);     
  })
  .SelectMany(t => 
  {
    return t.GetMethods(BindingFlags.Instance | BindingFlags.Public)
                  .Where(x => x.Name.StartsWith("Begin") && x.DeclaringType == t)
                  .Select(x =>
                  {
                    var methodType = x.DeclaringType;
                    var parameters = x.GetParameters()
                            .Where(xx => xx.Name != "state" && xx.ParameterType != typeof (AsyncCallback))
                            .ToList();
                    var parameterTypes = parameters.Select(xx => xx.ParameterType).ToArray();
                    var originalMethod = methodType.GetMethod(x.Name.Replace("Begin", ""), parameterTypes);
                    return new
                    {
                      Name = originalMethod.Name,
                      Parameters = parameters,                      
                      ReturnType = originalMethod.ReturnType,
                      ReturnTypeName = ToCSharpTypeString(originalMethod.ReturnType),
                      TypeName = ToCSharpTypeString(methodType)
                    };
                  });
  });
#>
using System;
using System.Threading.Tasks;

namespace <#= config.Namespace ?? "Extensions" #>  {
  static class <#= config.Name ?? "AsyncExtensions" #>
  {
  <# foreach(var m in methods){  #>

    <# if (m.ReturnType == typeof(void)){  #>

    public static Task <#= m.Name #>Async(this <#= m.TypeName #> @this
    <# foreach(var p in m.Parameters){  #>
      ,<#= ToCSharpTypeString(p.ParameterType) #> <#= p.Name #>
    <# }  #>
    )
    {
      if (@this == null) throw new ArgumentNullException("this");
      return Task.Factory.FromAsync(@this.Begin<#= m.Name #>, @this.End<#= m.Name #>
      <# foreach(var p in m.Parameters){  #>
        ,<#= p.Name #>
      <# }  #>
      , null);
    }

    <# } else { #>

    public static Task<<#= m.ReturnTypeName #>> <#= m.Name #>Async(this <#= m.TypeName #> @this
    <# foreach(var p in m.Parameters){  #>
      ,<#= ToCSharpTypeString(p.ParameterType) #> <#= p.Name #>
    <# }  #>
    )
    {
      if (@this == null) throw new ArgumentNullException("this");
      return Task<<#= m.ReturnTypeName #>>.Factory.FromAsync(@this.Begin<#= m.Name #>, @this.End<#= m.Name #>
      <# foreach(var p in m.Parameters){  #>
        ,<#= p.Name #>
      <# }  #>
      , null);
    }

    <# }  #>

  <# }  #>
  }
}
<#+
public static string ToCSharpTypeString(Type t)
{
    if (!t.IsGenericType)
  {
        return t.FullName;
  }
    var genericTypeName = t.GetGenericTypeDefinition().FullName;
    genericTypeName = genericTypeName.Substring(0, genericTypeName.IndexOf('`'));
    var genericArgs = String.Join(",", t.GetGenericArguments().Select(ta => ToCSharpTypeString(ta)).ToArray());
    return genericTypeName + "<" + genericArgs + ">";
}

Assembly AllReflectionOnlyAssemblyResolve(object sender, ResolveEventArgs args)
{ 
    return Assembly.ReflectionOnlyLoad(args.Name);
}

// DSL
public class GenerationConfiguration 
{ 
  public string Name {get;set;}
  public string Namespace {get;set;}
  public GenerationAssembly[] Assemblies {get; set;}  
}
public class GenerationAssembly
{ 
  public string Path {get;set;}
  public string[] TypeNames {get; set;}
}

public GenerationAssembly Define(string path, params string[] types)
{
  return new GenerationAssembly
  {
    Path = Host.ResolvePath(path),
    TypeNames = types
  };    
}

#>